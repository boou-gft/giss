<!DOCTYPE form-validation PUBLIC
     "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.2.0//EN"
     "http://jakarta.apache.org/commons/dtds/validator_1_2_0.dtd">

<form-validation>

	<global>

		<validator name="campoObrigatorio"
			classname="br.com.bradesco.web.aq.view.components.arq.UIClientSideValidation.validator.CommonsValidator"
			method="isSupplied" methodParams="java.lang.String" depends="required"
			msg="rotulo_campo_obrigatorio">

			<javascript>
				<![CDATA[
				function campoObrigatorio(InputData, mensagem) {
					
					#{msgs.rotulo_dependencia}
				function campoObrigatorio(form) {
					return validateRequired(form);
				}	
	            ]]>
			</javascript>
		</validator>
		<validator name="requiredSelectOneRadio2"
			classname="br.com.bradesco.web.aq.view.components.arq.UIClientSideValidation.validator.CommonsValidator"
			method="isSupplied" methodParams="java.lang.String" msg="errors.required">

			<javascript>
				<![CDATA[
            function validateRequiredSelectOneRadio2(form) {
            	var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new requiredSelectOneRadio2();
                
                var anyChecked = false;
                
                for (x in oRequired) {
                
                 	var aRadio=document.getElementsByName(oRequired[x][0]);
                  if (aRadio != null) {
	                  for (var z=0; z<aRadio.length; z++) {
					  	if (aRadio[z].checked == true) {
					  		anyChecked = true;
					  	}
					  }
				  }
			
                  if (anyChecked == false) {
                  	if (i == 0) {
                    	//focusField = field;
                    }
                    fields[i++] = oRequired[x][1];
                  	isValid = false;
                  }
                }
                if (fields.length > 0) {
                   //focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            
            ]]>
			</javascript>

		</validator>
		
		<validator name="requiredSelectOneRadio3"
			classname="br.com.bradesco.web.aq.view.components.arq.UIClientSideValidation.validator.CommonsValidator"
			method="isSupplied" methodParams="java.lang.String" msg="errors.required">

			<javascript>
				<![CDATA[
            function validateRequiredSelectOneRadio3(form) {
            	var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new requiredSelectOneRadio3();
                
                var anyChecked = false;
                
                for (x in oRequired) {
                
                 	var aRadio=document.getElementsByName(oRequired[x][0]);
                  if (aRadio != null) {
	                  for (var z=0; z<aRadio.length; z++) {
					  	if (aRadio[z].checked == true) {
					  		anyChecked = true;
					  	}
					  }
				  }
			
                  if (anyChecked == false) {
                  	if (i == 0) {
                    	//focusField = field;
                    }
                    fields[i++] = oRequired[x][1];
                  	isValid = false;
                  }
                }
                if (fields.length > 0) {
                   //focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            
            ]]>
			</javascript>

		</validator>

		<validator name="requiredSelectOneRadio"
			classname="br.com.bradesco.web.aq.view.components.arq.UIClientSideValidation.validator.CommonsValidator"
			method="isSupplied" methodParams="java.lang.String" msg="errors.required">

			<javascript>
				<![CDATA[
            function validateRequiredSelectOneRadio(form) {
            	var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new requiredSelectOneRadio();
                
                var anyChecked = false;
                
                for (x in oRequired) {
                
                 	var aRadio=document.getElementsByName(oRequired[x][0]);
                  if (aRadio != null) {
	                  for (var z=0; z<aRadio.length; z++) {
					  	if (aRadio[z].checked == true) {
					  		anyChecked = true;
					  	}
					  }
				  }
			
                  if (anyChecked == false) {
                  	if (i == 0) {
                    	//focusField = field;
                    }
                    fields[i++] = oRequired[x][1];
                  	isValid = false;
                  }
                }
                if (fields.length > 0) {
                   //focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            
            ]]>
			</javascript>

		</validator>
		<validator name="requiredSelectLista"
			classname="br.com.bradesco.web.aq.view.components.arq.UIClientSideValidation.validator.CommonsValidator"
			method="isSupplied" methodParams="java.lang.String" msg="errors.lista.required">

			<javascript>
				<![CDATA[
            function validateRequiredSelectLista(form) {
            	var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new requiredSelectLista();
                
                var anyChecked = false;
                
                for (x in oRequired) {
                
                  var aRadio=document.getElementsByName(oRequired[x][0]);
                  if (aRadio != null) {
	                  for (var z=0; z<aRadio.length; z++) {
					  	if (aRadio[z].checked == true) {
					  		anyChecked = true;
					  	}
					  }
				  }
			
                  if (anyChecked == false) {
                  	if (i == 0) {
                    	//focusField = field;
                    }
                    fields[i++] = oRequired[x][1];
                  	isValid = false;
                  }
                }
                if (fields.length > 0) {
                   //focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            
            ]]>
			</javascript>

		</validator>

		<validator name="checkboxChecked"
			classname="br.com.bradesco.web.aq.view.components.arq.UIClientSideValidation.validator.CommonsValidator"
			method="isSupplied" methodParams="java.lang.String" msg="errors.checkbox.checked.required">

			<javascript>
				<![CDATA[
            function validateCheckboxChecked(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new checkboxChecked();
                for (x in oRequired) {
                   var field = form[oRequired[x][0]];
                   
                   if (field.type == 'checkbox') {
                        if (field.checked != true) {
                        
                           if (i == 0) {
                               focusField = field;
                           }
                           fields[i++] = oRequired[x][1];
                           isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            
            ]]>
			</javascript>

		</validator>

		<validator name="maxCheckboxesChecked"
			classname="org.apache.commons.validator.GenericValidator" method="maxLength"
			methodParams="java.lang.String,int" depends=""
			msg="errors.checkbox.maxChecked">

			<javascript>
				<![CDATA[
            function validateMaxCheckboxesChecked(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oMaxLength = new maxCheckboxesChecked();
                
                var numChecked = 0;
                
                for (x in oMaxLength) {
                    
                    var aCheckbox=document.getElementsByName(oMaxLength[x][0]);
                    if (aCheckbox != null) {
	                  for (var z=0; z<aCheckbox.length; z++) {
					  	if (aCheckbox[z].checked == true) {
					  		numChecked++;
					  	}
					  }
				  	}
                    
                    var iMax = parseInt(parseFloat(oMaxLength[x][2]("max")));
                    
                    if (numChecked > iMax) {
                        fields[i++] = oMaxLength[x][1]; // argumento para o mensagem do erro
                        isValid = false;
                    }
                }
                if (fields.length > 0) {
                   alert(fields.join('\n'));
                }
                return isValid;
            }]]>
			</javascript>

		</validator>

		<validator name="maskIfEnabled"
			classname="org.apache.commons.validator.GenericValidator" method="matchRegexp"
			methodParams="java.lang.String,java.lang.String" depends=""
			msg="errors.invalid">

			<javascript>
				<![CDATA[
            function validateMaskIfEnabled(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oMasked = new maskIfEnabled();
                for (x in oMasked) {
                
                    var field = form[oMasked[x][0]];
                    
                    if ((field.type == 'text' || 
                         field.type == 'textarea' ||
                         field.type == 'password') && 
                         (field.value.length > 0) && (field.disabled==false)) {
                         
                        if (!matchPattern(field.value, oMasked[x][2]("mask"))) {
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oMasked[x][1];
                            isValid = false;
                        }
                    }
                }
                
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }

            function matchPattern(value, mask) {
               return mask.exec(value);
            }]]>
			</javascript>

		</validator>

		<validator name="currencyMask"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[

			function currencyMask(fld, milSep, decSep, e, maxLength, qtdCasas) {
 
				var backspace = 8; 
			 
			    var del = 46;
			 
			    var espaco = 32;
			 
			    var enter = 13;
			 
			    var sep = 0;
			 
			    var key = '';
			 
			    var i = 0;
			 
			    var j = 0;
			 
			    var len = 0;
			 
			    var len2 = 0;
			 
			    var strCheck = '0123456789';
			 
			    var aux = '';
			 
			    var aux2 = '';
			 
			    var whichCode = (window.Event) ? e.which : e.keyCode;
			 
			    if (whichCode == enter || whichCode == espaco) return false;
			 
			    if (whichCode == backspace || whichCode == del) return true;
			 
			    if (fld.value.length >= maxLength) return false;
			 
			    
			    key = String.fromCharCode(whichCode);
			 
			 
			    if (strCheck.indexOf(key) == -1) return false;
			 
			 
			    len = fld.value.length;
			 
			    
			    for(i = 0; i < len; i++)
			 
			        if ((fld.value.charAt(i) != '0') && (fld.value.charAt(i) != decSep)) break;
			 
			    aux = '';
			    
			    for(; i < len; i++)
			 
			        if (strCheck.indexOf(fld.value.charAt(i))!=-1) aux += fld.value.charAt(i);
			 
			    aux += key;
			 
			    len = aux.length;
			    
			    if (len == 0) fld.value = '';
			 
			    if (len == 1) fld.value = '0' + decSep + '0' + aux; 
			 
			    if (len == 2) fld.value = '0' + decSep + aux; 
			 
			    if (len > 2) { 
			 
			        aux2 = '';
			 
			        for (j = 0, i = len - 3; i >= 0; i--) {
			 
			            if (j == 3) {
			 
			                aux2 += milSep;
			 
			                j = 0;
			 
			            }
			 
			            aux2 += aux.charAt(i);
			 
			            j++;
			 
			        }        
			 
			        fld.value = '';
			 
			        len2 = aux2.length;
			 
			        for (i = len2 - 1; i >= 0; i--) 
			 
			            fld.value += aux2.charAt(i);
			 
			        fld.value += decSep + aux.substr(len - qtdCasas, len);
			 
			    }
			 
			    return false;
			}
			
			 ]]>
			</javascript>

		</validator>

		<validator name="mascaraPercentual5Casas"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
			
			function mascaraPercentual5Casas(objTextBox, SeparadorMilesimo, SeparadorDecimal, e) {
				var sep = 0;
				var key = '';
				var i = j = 0;
				var len = len2 = 0;
				var strCheck = '0123456789';
				var aux = aux2 = '';
				
				var whichCode = (window.Event) ? e.which : e.keyCode;
				if (whichCode == 13 || whichCode == 8)
					return true;
				
				key = String.fromCharCode(whichCode); // Valor para o código da Chave
				if (strCheck.indexOf(key) == -1)
					return false; // Chave inválida
				len = objTextBox.value.length;
				//alert(len);
				
				for (i = 0; i < len; i++)
					if ((objTextBox.value.charAt(i) != '0')
							&& (objTextBox.value.charAt(i) != SeparadorDecimal))
						break;
				aux = '';
				
				for (; i < len; i++)
					if (strCheck.indexOf(objTextBox.value.charAt(i)) != -1)
						aux += objTextBox.value.charAt(i);
				aux += key;
				len = aux.length;
				 //alert(len);
				if (len == 9) {
					return false;
				}
				if (len == 0)
					objTextBox.value = '';
				if (len == 1)
					objTextBox.value = '0' + SeparadorDecimal + '0' + '0' + '0' + '0' + aux;
				if (len == 2)
					objTextBox.value = '0' + SeparadorDecimal + '0' + '0' + '0' + aux;
				if (len == 3)
					objTextBox.value = '0' + SeparadorDecimal + '0' + '0' + aux;
				if (len == 4)
					objTextBox.value = '0' + SeparadorDecimal + '0' + aux;
				if (len == 5)
					objTextBox.value = '0' + SeparadorDecimal + aux;
				if (len > 5) {
					aux2 = '';
					//alert(i);
					//alert(len);
					for (j = 0, i = len - 6; i >= 0; i--) {
						if (j == 3) {
							aux2 += SeparadorMilesimo;
							j = 0;
						}
						aux2 += aux.charAt(i);
						//alert(aux.charAt(i));
						//alert(i);
						//alert(aux2);
						j++;
					}
					objTextBox.value = '';
					//alert('1');
					len2 = aux2.length;
					//alert('2');
					for (i = len2 - 1; i >= 0; i--)
						objTextBox.value += aux2.charAt(i);
					objTextBox.value += SeparadorDecimal + aux.substr(len - 5, len);
					//alert(aux.substr(len - 5, len));
				}
					return false;
			}]]>
			</javascript>

		</validator>

		<validator name="mascaraPercentual3Casas"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
			
			function mascaraPercentual3Casas(objTextBox, SeparadorMilesimo, SeparadorDecimal, e) {
				var sep = 0;
				var key = '';
				var i = j = 0;
				var len = len2 = 0;
				var strCheck = '0123456789';
				var aux = aux2 = '';
				
				var whichCode = (window.Event) ? e.which : e.keyCode;
				if (whichCode == 13 || whichCode == 8)
					return true;
				
				key = String.fromCharCode(whichCode); // Valor para o código da Chave
				if (strCheck.indexOf(key) == -1)
					return false; // Chave inválida
				len = objTextBox.value.length;
				//alert(len);
				
				for (i = 0; i < len; i++)
					if ((objTextBox.value.charAt(i) != '0')
							&& (objTextBox.value.charAt(i) != SeparadorDecimal))
						break;
				aux = '';
				
				for (; i < len; i++)
					if (strCheck.indexOf(objTextBox.value.charAt(i)) != -1)
						aux += objTextBox.value.charAt(i);
				aux += key;
				len = aux.length;
				 //alert(len);
				if (len == 7) {
					return false;
				}
				if (len == 0)
					objTextBox.value = '';
				if (len == 1)
					objTextBox.value = '0' + SeparadorDecimal + '0' + '0' + aux;
				if (len == 2)
					objTextBox.value = '0' + SeparadorDecimal + '0' + aux;
				if (len == 3)
					objTextBox.value = '0' + SeparadorDecimal + aux;
				if (len > 3) {
					aux2 = '';
					//alert(i);
					//alert(len);
					for (j = 0, i = len - 4; i >= 0; i--) {
						if (j == 3) {
							aux2 += SeparadorMilesimo;
							j = 0;
						}
						aux2 += aux.charAt(i);
						//alert(aux.charAt(i));
						//alert(i);
						//alert(aux2);
						j++;
					}
					objTextBox.value = '';
					//alert('1');
					len2 = aux2.length;
					//alert('2');
					for (i = len2 - 1; i >= 0; i--)
						objTextBox.value += aux2.charAt(i);
					objTextBox.value += SeparadorDecimal + aux.substr(len - 3, len);
					//alert(aux.substr(len - 5, len));
				}
					return false;
			}]]>
			</javascript>

		</validator>

		<validator name="validaTecla"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
				
			function validaTecla(valores, event) { 

			    var BCK=8, //backspace 
			
			    ETR=13, //return 
			
			    DEL=127, //delete 
			    			
			    //MIN=45, //'-' 
			
			    //LEFT=37, 
			
			    //RIGHT=39, 
			
			    //UP=38, 
			
			    //DOWN=40, 
			
			    key,tecla; 
			
			    if(BrowserDetect.browser == 'Firefox' && event.which) { 
				tecla=event.which; 
			    } else if(BrowserDetect.browser == 'Explorer' && event.keyCode) { 
				tecla=event.keyCode; 
			    } else { 
				return true; 
			    }
			 
			    key=String.fromCharCode(tecla); 
			
			    switch(tecla) { 
			
			        case ETR:
				        return false;  
				
			        case BCK: 
			
			        case DEL:
			        
			        //case MIN: 
			
			        //case LEFT: 
			
			        //case RIGHT: 
			
			        //case UP: 
			
			        //case DOWN: 
			
			            return true; 
			
			        default: 
			
			            if(valores.indexOf(key)!=-1) { 
				        return true; 
			            } 
			     } 
			    
			    return false; 
			} 
			
			var BrowserDetect = {
				init: function () {
					this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
					this.version = this.searchVersion(navigator.userAgent)
						|| this.searchVersion(navigator.appVersion)
						|| "an unknown version";
					this.OS = this.searchString(this.dataOS) || "an unknown OS";
				},
				searchString: function (data) {
					for (var i=0;i<data.length;i++)	{
						var dataString = data[i].string;
						var dataProp = data[i].prop;
						this.versionSearchString = data[i].versionSearch || data[i].identity;
						if (dataString) {
							if (dataString.indexOf(data[i].subString) != -1)
								return data[i].identity;
						}
						else if (dataProp)
							return data[i].identity;
					}
				},
				searchVersion: function (dataString) {
					var index = dataString.indexOf(this.versionSearchString);
					if (index == -1) return;
					return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
				},
				dataBrowser: [
					{ 	string: navigator.userAgent,
						subString: "OmniWeb",
						versionSearch: "OmniWeb/",
						identity: "OmniWeb"
					},
					{
						string: navigator.vendor,
						subString: "Apple",
						identity: "Safari"
					},
					{
						prop: window.opera,
						identity: "Opera"
					},
					{
						string: navigator.vendor,
						subString: "iCab",
						identity: "iCab"
					},
					{
						string: navigator.vendor,
						subString: "KDE",
						identity: "Konqueror"
					},
					{
						string: navigator.userAgent,
						subString: "Firefox",
						identity: "Firefox"
					},
					{
						string: navigator.vendor,
						subString: "Camino",
						identity: "Camino"
					},
					{		// for newer Netscapes (6+)
						string: navigator.userAgent,
						subString: "Netscape",
						identity: "Netscape"
					},
					{
						string: navigator.userAgent,
						subString: "MSIE",
						identity: "Explorer",
						versionSearch: "MSIE"
					},
					{
						string: navigator.userAgent,
						subString: "Gecko",
						identity: "Mozilla",
						versionSearch: "rv"
					},
					{ 		// for older Netscapes (4-)
						string: navigator.userAgent,
						subString: "Mozilla",
						identity: "Netscape",
						versionSearch: "Mozilla"
					}
				],
				dataOS : [
					{
						string: navigator.platform,
						subString: "Win",
						identity: "Windows"
					},
					{
						string: navigator.platform,
						subString: "Mac",
						identity: "Mac"
					},
					{
						string: navigator.platform,
						subString: "Linux",
						identity: "Linux"
					}
				]
			
			};
			BrowserDetect.init();
			
			
			 ]]>
			</javascript>

		</validator>

		<validator name="validaExpressaoRegularOnBlur"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
			
			function validaExpressaoRegularOnBlur(InputBox, regEx, mensagem){
				return number_validate(InputBox, regEx, mensagem)
			}
			
			
			function number_validate(InputControl, Expression ,Message){
			 
			 	  REALIZANDO_VALIDACOES = true;
			 
			  	  var reg;
			 
			  	  var valid;
			 
				  if (InputControl == undefined){
				 		REALIZANDO_VALIDACOES = false;
	    		    	return true;
				  }
				 
				  if (InputControl.value.length == 0){
					 	REALIZANDO_VALIDACOES = false;
				    	return true;
				  }
			 
				  reg = new RegExp(Expression,"");
				 
				  valid = reg.test(InputControl.value);
				 
				  if (!valid){
				    	alert(Message);
					    aplicarFoco(InputControl);
				  }
			 
			 	REALIZANDO_VALIDACOES = false;
			 
			  	return valid;
			}
			 
			 
			function aplicarFoco(pInputBox) {
			 	setTimeout("document.forms['"+pInputBox.form.name+"'].elements['"+pInputBox.name+"'].focus()",1);
			}
			
			 ]]>
			</javascript>

		</validator>

		<validator name="validaData"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[

			function validaData(InputData, mensagem) {

				InputData.value = trim(InputData.value);
				var date = InputData.value
				erro = false;
				
				if(date != ""){
				
					var array_data = new Array;
					var ExpReg = new RegExp("(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/[12][0-9]{3}");
		
					array_data = date.split("/");
					
					
					if ( date.search(ExpReg) == -1 )
						erro = true;
		
					else if ( ( ( array_data[1] == 4 ) || ( array_data[1] == 6 ) || ( array_data[1] == 9 ) || ( array_data[1] == 11 ) ) && ( array_data[0] > 30 ) )
						erro = true;
		
					else if ( array_data[1] == 2 ) {
					
						if ( ( array_data[0] > 28 ) && ( ( array_data[2] % 4 ) != 0 ) )
							erro = true;
						
						if ( ( array_data[0] > 29 ) && ( ( array_data[2] % 4 ) == 0 ) )
							erro = true;
					}
				}
				
				if(erro){
					alert(mensagem);
					InputData.value="";
					InputData.focus();
					return false;
				} else {
					return true;
				}
			}
			
			function trim(str, chars) {
			    return ltrim(rtrim(str, chars), chars);
			}
			
			function ltrim(str, chars) {
			    chars = chars || "\\s";
			    return str.replace(new RegExp("^[" + chars + "]+", "g"), "");
			}
			
			function rtrim(str, chars) {
			    chars = chars || "\\s";
			    return str.replace(new RegExp("[" + chars + "]+$", "g"), "");
			}
			
			]]>
			</javascript>

		</validator>

		<validator name="mascaraDataPress"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
					
			function mascaraDataPress(mascara, event, inputBox) {
			    var BCK = 8, TAB = 9, ETR = 13, DEL = 127;
			    var tecla, key, ret;
			    var str, j, numeros = "0123456789";
			    if (event.which) {
			        tecla = event.which;
			    } else {
			        tecla = event.keyCode;
			    }
			    key = String.fromCharCode(tecla);
			    switch (tecla) {
			      case ETR:
			        return false;
			      case BCK:
			      case DEL:
			      case TAB:
			        return true;
			      default:;
			    }
			    str = inputBox.value;
			    j = str.length;
			    while (j < mascara.length - 1 &&
			        mascara.charAt(j) != "d" && mascara.charAt(j) != key) {
			        str = str + mascara.charAt(j);
			        j++;
			    }
			    inputBox.value = str;
			    ret = mascara.charAt(j) == "d" && numeros.indexOf(key) != -1 ||
			        mascara.charAt(j) != "d" && mascara.charAt(j) == key;
			    return ret;
			}	
			
			]]>
			</javascript>

		</validator>

		<validator name="mascaraDataBlur"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
				
				function mascaraDataBlur(mascara, event, inputBox) {
				    var str, strN, j, numeros = "0123456789";
				    strN = "";
				    for (i = 0; i < inputBox.value.length; i++) {
				        if (numeros.indexOf(inputBox.value.charAt(i)) != -1) {
				            strN = strN + inputBox.value.charAt(i);
				        }
				    }
				    qtdNumeroNaMascara = 0;
				    for (i = 0; i < mascara.length; i++) {
				        if (mascara.charAt(i) == "d") {
				            qtdNumeroNaMascara++;
				        }
				    }
				    if (strN.length != qtdNumeroNaMascara) {
				        return true;
				    }
				    str = "";
				    for (i = 0, j = 0; i < strN.length; i++, j++) {
				        while (mascara.charAt(j) != "d") {
				            str = str + mascara.charAt(j);
				            j++;
				        }
				        str = str + strN.charAt(i);
				    }
				    inputBox.value = "";
				    inputBox.value = str;
				    return true;
				}
			]]>
			</javascript>

		</validator>


		<validator name="formataCpf"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
				
				function formataCpf(campo, teclapres)
				{
					var tecla = teclapres.keyCode;
					var vr = new String(campo.value);
					vr = vr.replace(".", "");
					vr = vr.replace("/", "");
					vr = vr.replace("-", "");
					tam = vr.length + 1;
					if (tecla != 14)
					{
						if (tam == 4)
							campo.value = vr.substr(0, 3) + '.';
						if (tam == 7)
							campo.value = vr.substr(0, 3) + '.' + vr.substr(3, 6) + '.';
						if (tam == 11)
							campo.value = vr.substr(0, 3) + '.' + vr.substr(3, 3) + '.' + vr.substr(7, 3) + '-' + vr.substr(11, 2);
					}
				}
			]]>
			</javascript>

		</validator>


		<validator name="formataCnpj"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
				
				function formataCnpj(campo, teclapres)
				{
					var tecla = teclapres.keyCode;
					var vr = new String(campo.value);
					vr = vr.replace(".", "");
					vr = vr.replace("/", "");
					vr = vr.replace("-", "");
					tam = vr.length + 1;
					if (tecla != 14)
					{
						if (tam == 3)
							campo.value = vr.substr(0, 2) + '.';
						if (tam == 6)
							campo.value = vr.substr(0, 2) + '.' + vr.substr(2, 5) + '.';
						if (tam == 10)
							campo.value = vr.substr(0, 2) + '.' + vr.substr(2, 3) + '.' + vr.substr(6, 3) + '/';
						if (tam == 15)
							campo.value = vr.substr(0, 2) + '.' + vr.substr(2, 3) + '.' + vr.substr(6, 3) + '/' + vr.substr(9, 4) + '-' + vr.substr(13, 2);
					}
				}
			]]>
			</javascript>

		</validator>


		<validator name="formataNumCont"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[			
				
				function formataNumCont(numCont, teclapres) {
					var tecla = teclapres.keyCode;
					var vr = new String(numCont.value);
					vr = vr.replace("-", "");
					vr = vr.replace(".", "");
					vr = vr.replace("/", "");

					tam = vr.length + 1;
					if (tecla != 14) 
					{
					if (tam == 4)
						numCont.value = vr.substr(0, 3) + '-';
					}
				}
				
 				]]>
			</javascript>

		</validator>


		<validator name="formataAgencia"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">

			<javascript>
				<![CDATA[
				
				function formataAgencia(agenc, teclapres) {
					var tecla = teclapres.keyCode;
					var vr = new String(agenc.value);
					vr = vr.replace("-", "");
					vr = vr.replace(".", "");
					vr = vr.replace("/", "");

					tam = vr.length + 1;
					if (tecla != 6) 
					{
					if (tam == 5)
					agenc.value = vr.substr(0, 4) + '-';
					}
				}
				
		 		]]>
			</javascript>

		</validator>
		<validator name="validarEmail"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"
			methodParams="" depends="" msg="errors.invalid">
			
			<javascript>
				function validarEmail(obj){
					a=obj.value;
					var err=0;
					
					if (obj.value == "") {
						return true;
					}
					if (a.indexOf('@')!=-1){
						if (a.substring(0,1)=='@')
							err=1;	
						if (a.indexOf(' ')!=-1)
							err=1;	
						if (a.indexOf('.')==-1)		
							err=1;
					} else {	
						err=1;
					}//se erro 
						
					if (err==1){
						alert('O e-mail est\u00E1 incorreto');
						obj.focus();
						return false;
					}
				}
			</javascript>
		</validator>


<validator name="bloquearEnter"
			classname="org.apache.commons.validator.GenericValidator" method="isSupplied"  msg="errors.invalid" methodParams="" depends="" >
	<javascript>
				<![CDATA[		
			function bloquearEnter(event) {
			    var BCK = 8, TAB = 9, ETR = 13, DEL = 127;
			    var tecla, key, ret;
			    var str, j, numeros = "0123456789";
			    if (event.which) {
			        tecla = event.which;
			    } else {
			        tecla = event.keyCode;
			    }
			    key = String.fromCharCode(tecla);
			    switch (tecla) {
			      case ETR:
			        return false;
			      case BCK:
			      case DEL:
			      case TAB:
			        return true;
			      default: return true;
			    }
			}
			    		]]>
			</javascript>
			
			</validator>
	</global>

</form-validation>
